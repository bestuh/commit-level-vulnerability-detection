	char data[8];
	int brightness;
		return -EIO;
			 ret);
	}
		return -EIO;
			 data[4]);
	}
	return brightness;
	}
}
	char data[8];
	const char *macro_mode;
		return -EIO;
			 ret);
	}
		return -EIO;
			 data[0]);
	}
	return snprintf(buf, PAGE_SIZE, "%s\n", macro_mode);
}
	char data[8];
	int current_profile;
		return -EIO;
			 ret);
	}
		return -EIO;
			 data[7]);
	}
	return snprintf(buf, PAGE_SIZE, "%d\n", current_profile);
}
			__mark_reg_known(regs + insn->dst_reg, insn->imm);
			regs[insn->dst_reg].type = SCALAR_VALUE;
static inline void __d_set_inode_and_type(struct dentry *dentry,
	const char *old_name;
	struct dentry *dentry = NULL, *trap;
	old_name = fsnotify_oldname_init(old_dentry->d_name.name);
		fsnotify_oldname_free(old_name);
	if (error) {
		goto exit;
	fsnotify_move(d_inode(old_dir), d_inode(new_dir), old_name,
	d_move(old_dentry, dentry);
		d_is_dir(old_dentry),
	fsnotify_oldname_free(old_name);
		NULL, old_dentry);
	unlock_rename(new_dir, old_dir);
	const unsigned char *old_name;
	unsigned max_links = new_dir->i_sb->s_max_links;
	old_name = fsnotify_oldname_init(old_dentry->d_name.name);
	dget(new_dentry);
		fsnotify_move(old_dir, new_dir, old_name, is_dir,
	if (!error) {
			      !(flags & RENAME_EXCHANGE) ? target : NULL, old_dentry);
	fsnotify_oldname_free(old_name);
	}
	else if (p_inode->i_fsnotify_mask & mask) {
		if (path)
				       dentry->d_name.name, 0);
			ret = fsnotify(p_inode, mask, path, FSNOTIFY_EVENT_PATH,
		else
				       dentry->d_name.name, 0);
			ret = fsnotify(p_inode, mask, dentry->d_inode, FSNOTIFY_EVENT_INODE,
	}
#if defined(CONFIG_FSNOTIFY)	/* notify helpers */

/*
 * fsnotify_oldname_init - save off the old filename before we change it
 */
static inline const unsigned char *fsnotify_oldname_init(const unsigned char *name)
{
	return kstrdup(name, GFP_KERNEL);
}

/*
 * fsnotify_oldname_free - free the name we got from fsnotify_oldname_init
 */
static inline void fsnotify_oldname_free(const unsigned char *old_name)
{
	kfree(old_name);
}

#else	/* CONFIG_FSNOTIFY */

static inline const char *fsnotify_oldname_init(const unsigned char *name)
{
	return NULL;
}

static inline void fsnotify_oldname_free(const unsigned char *old_name)
{
}

#endif	/*  CONFIG_FSNOTIFY */

{

{
	if (!(priv->stations[sta_id].used & IWL_STA_DRIVER_ACTIVE))
	}
}
		iwl_sta_ucode_activate(priv, sta_id);
		ret = 0;
		IWL_DEBUG_INFO(priv, "REPLY_ADD_STA PASSED\n");
		break;
	pch->chan = chan;
	chan->ppp = pch;
	if (stringset == ETH_SS_STATS)
{
		return ARRAY_SIZE(g_gmac_stats_string);
	if (stringset == ETH_SS_STATS)
{
		return ETH_PPE_STATIC_NUM;
	if (stringset == ETH_SS_STATS)
{
		return HNS_RING_STATIC_REG_NUM;
	if (stringset == ETH_SS_STATS)
{
		return ARRAY_SIZE(g_xgmac_stats_string);
			int max = vfio_pci_get_irq_count(vdev, hdr.index);
			    hdr.start >= max || hdr.start + hdr.count > max)
	if (pte_none(*pte))
		return 0;
	spinlock_t *ptl;
	ptl = huge_pte_lock(hstate_vma(vma), vma->vm_mm, (pte_t *)pmd);
#define BPF_MAX_VAR_OFF	(1ULL << 31)
#define BPF_MAX_VAR_SIZ	INT_MAX
	__update_reg_bounds(dst_reg);
	switch (opcode) {
int kvm_iommu_map_pages(struct kvm *kvm, struct kvm_memory_slot *slot)
			       "iommu failed to map pfn=%llx\n", pfn);
			goto unmap_pages;
unmap_pages:
	return r;
			return rold->umin_value == 0 &&
			       rold->umax_value == U64_MAX &&
			       rold->smin_value == S64_MIN &&
			       rold->smax_value == S64_MAX &&
static int ceph_key_preparse(struct key_preparsed_payload *prep)
		  const void *src2, size_t src2_len);
int ceph_crypto_init(void);
int xt_check_entry_offsets(const void *base,
			   unsigned int target_offset,
int xt_compat_check_entry_offsets(const void *base,
			     void __user **dstptr, unsigned int *size);
				  unsigned int target_offset,
	err = xt_check_entry_offsets(e, e->target_offset, e->next_offset);
	if (err)
	ret = xt_compat_check_entry_offsets(e, e->target_offset,
					    e->next_offset);
	err = xt_check_entry_offsets(e, e->target_offset, e->next_offset);
	if (err)
	ret = xt_compat_check_entry_offsets(e,
					    e->target_offset, e->next_offset);
	err = xt_check_entry_offsets(e, e->target_offset, e->next_offset);
	if (err)
	ret = xt_compat_check_entry_offsets(e,
					    e->target_offset, e->next_offset);
/* see xt_check_entry_offsets */
int xt_compat_check_entry_offsets(const void *base,
				  unsigned int target_offset,
{
	const struct compat_xt_entry_target *t;
	if (target_offset + sizeof(*t) > next_offset)
int xt_check_entry_offsets(const void *base,
			   unsigned int target_offset,
{
	const struct xt_entry_target *t;
	if (target_offset + sizeof(*t) > next_offset)
	u8 last_lock;
	struct i2c_client *i2c_client_demod;
	u8 obuf[0x40], ibuf[0x40];
	struct dvb_usb_device *d = i2c_get_adapdata(adap);
		return -ENODEV;
	if (mutex_lock_interruptible(&d->i2c_mutex) < 0)
		return -EAGAIN;
			obuf[0] = msg[0].buf[0] + 0x36;
			obuf[1] = 3;
			obuf[2] = 0;
			if (dvb_usb_generic_rw(d, obuf, 3, ibuf, 0, 0) < 0)
		case SU3000_STREAM_CTRL:
				err("i2c transfer failed.");
			obuf[0] = 0x10;
			if (dvb_usb_generic_rw(d, obuf, 1, ibuf, 2, 0) < 0)
		case DW2102_RC_QUERY:
				err("i2c transfer failed.");
			msg[0].buf[1] = ibuf[0];
			msg[0].buf[0] = ibuf[1];
				err("i2c transfer failed.");
			break;
			obuf[0] = 0x08;
			obuf[1] = msg[0].addr;
			obuf[2] = msg[0].len;
			memcpy(&obuf[3], msg[0].buf, msg[0].len);
			if (dvb_usb_generic_rw(d, obuf, msg[0].len + 3,
						ibuf, 1, 0) < 0)
				err("i2c transfer failed.");
		obuf[0] = 0x09;
		obuf[1] = msg[0].len;
		obuf[2] = msg[1].len;
		obuf[3] = msg[0].addr;
		memcpy(&obuf[4], msg[0].buf, msg[0].len);

		if (dvb_usb_generic_rw(d, obuf, msg[0].len + 4,
					ibuf, msg[1].len + 1, 0) < 0)
			err("i2c transfer failed.");
		memcpy(msg[1].buf, &ibuf[1], msg[1].len);
		break;
	}
	mutex_unlock(&d->i2c_mutex);
	u8 obuf[] = {0xde, 0};
	struct dw2102_state *state = (struct dw2102_state *)d->priv;
	if (i && !state->initialized) {
		state->initialized = 1;
		return dvb_usb_generic_rw(d, obuf, 2, NULL, 0, 0);
	}
	return 0;
}
static int su3000_frontend_attach(struct dvb_usb_adapter *d)
{
	u8 obuf[3] = { 0xe, 0x80, 0 };
	u8 ibuf[] = { 0 };
{
	if (dvb_usb_generic_rw(d->dev, obuf, 3, ibuf, 1, 0) < 0)
		err("command 0x0e transfer failed.");
	obuf[0] = 0xe;
	obuf[1] = 0x02;
	obuf[2] = 1;
	if (dvb_usb_generic_rw(d->dev, obuf, 3, ibuf, 1, 0) < 0)
		err("command 0x0e transfer failed.");
	obuf[0] = 0xe;
	obuf[1] = 0x83;
	obuf[2] = 0;
	if (dvb_usb_generic_rw(d->dev, obuf, 3, ibuf, 1, 0) < 0)
		err("command 0x0e transfer failed.");
	obuf[0] = 0xe;
	obuf[1] = 0x83;
	obuf[2] = 1;
	if (dvb_usb_generic_rw(d->dev, obuf, 3, ibuf, 1, 0) < 0)
		err("command 0x0e transfer failed.");
	obuf[0] = 0x51;
	if (dvb_usb_generic_rw(d->dev, obuf, 1, ibuf, 1, 0) < 0)
		err("command 0x51 transfer failed.");
	d->fe_adap[0].fe = dvb_attach(ds3000_attach, &su3000_ds3000_config,
					&d->dev->i2c_adap);
	if (d->fe_adap[0].fe == NULL)
		return -EIO;
	if (dvb_attach(ts2020_attach, d->fe_adap[0].fe,
				&dw2104_ts2020_config,
				&d->dev->i2c_adap)) {
				&dw2104_ts2020_config,
		info("Attached DS3000/TS2020!");
static int t220_frontend_attach(struct dvb_usb_adapter *d)
{
	u8 obuf[3] = { 0xe, 0x87, 0 };
	u8 ibuf[] = { 0 };
{
	if (dvb_usb_generic_rw(d->dev, obuf, 3, ibuf, 1, 0) < 0)
		err("command 0x0e transfer failed.");
	obuf[0] = 0xe;
	obuf[1] = 0x86;
	obuf[2] = 1;
	if (dvb_usb_generic_rw(d->dev, obuf, 3, ibuf, 1, 0) < 0)
		err("command 0x0e transfer failed.");
	obuf[0] = 0xe;
	obuf[1] = 0x80;
	obuf[2] = 0;
	if (dvb_usb_generic_rw(d->dev, obuf, 3, ibuf, 1, 0) < 0)
		err("command 0x0e transfer failed.");
	obuf[0] = 0xe;
	obuf[1] = 0x80;
	obuf[2] = 1;
	if (dvb_usb_generic_rw(d->dev, obuf, 3, ibuf, 1, 0) < 0)
		err("command 0x0e transfer failed.");
	obuf[0] = 0x51;
	if (dvb_usb_generic_rw(d->dev, obuf, 1, ibuf, 1, 0) < 0)
		err("command 0x51 transfer failed.");
	d->fe_adap[0].fe = dvb_attach(cxd2820r_attach, &cxd2820r_config,
					&d->dev->i2c_adap, NULL);
	if (d->fe_adap[0].fe != NULL) {
		if (dvb_attach(tda18271_attach, d->fe_adap[0].fe, 0x60,
					&d->dev->i2c_adap, &tda18271_config)) {
			info("Attached TDA18271HD/CXD2820R!");
static int m88rs2000_frontend_attach(struct dvb_usb_adapter *d)
{
	u8 obuf[] = { 0x51 };
	u8 ibuf[] = { 0 };
{
	if (dvb_usb_generic_rw(d->dev, obuf, 1, ibuf, 1, 0) < 0)
		err("command 0x51 transfer failed.");
	d->fe_adap[0].fe = dvb_attach(m88rs2000_attach, &s421_m88rs2000_config,
					&d->dev->i2c_adap);
	if (d->fe_adap[0].fe == NULL)
		return -EIO;
	if (dvb_attach(ts2020_attach, d->fe_adap[0].fe,
				&dw2104_ts2020_config,
				&d->dev->i2c_adap)) {
				&dw2104_ts2020_config,
		info("Attached RS2000/TS2020!");
	u8 obuf[3] = { 0xe, 0x80, 0 };
	u8 ibuf[] = { 0 };
	if (dvb_usb_generic_rw(d, obuf, 3, ibuf, 1, 0) < 0)
		err("command 0x0e transfer failed.");
	obuf[0] = 0xe;
	obuf[1] = 0x02;
	obuf[2] = 1;
	if (dvb_usb_generic_rw(d, obuf, 3, ibuf, 1, 0) < 0)
		err("command 0x0e transfer failed.");
	obuf[0] = 0xe;
	obuf[1] = 0x83;
	obuf[2] = 0;
	if (dvb_usb_generic_rw(d, obuf, 3, ibuf, 1, 0) < 0)
		err("command 0x0e transfer failed.");
	obuf[0] = 0xe;
	obuf[1] = 0x83;
	obuf[2] = 1;
	if (dvb_usb_generic_rw(d, obuf, 3, ibuf, 1, 0) < 0)
		err("command 0x0e transfer failed.");
	obuf[0] = 0x51;
	if (dvb_usb_generic_rw(d, obuf, 1, ibuf, 1, 0) < 0)
		err("command 0x51 transfer failed.");
		evt->event.lun[1] = tpg->tport_tpgt & 0xFF;
		evt->event.lun[0] = 0x01;
		if (lun->unpacked_lun >= 256)
	struct vhost_scsi_tpg *tpg;
		sk->sk_userlocks |= SOCK_SNDBUF_LOCK;
		break;
static int __net_init sctp_net_init(struct net *net)
	/* Initialize the control inode/socket for handling OOTB packets.  */
	if ((status = sctp_ctl_sock_init(net))) {
		pr_err("Failed to initialize the SCTP control sock\n");
		goto err_ctl_sock_init;
	}

err_ctl_sock_init:
	sctp_dbg_objcnt_exit(net);
	sctp_proc_exit(net);
static void __net_exit sctp_net_exit(struct net *net)
	/* Free the control endpoint.  */
	inet_ctl_sock_destroy(net->sctp.ctl_sock);

	status = sctp_v4_protosw_init();
	if (status)
err_add_protocol:
	sctp_v6_protosw_exit();
err_protosw_init:
	sctp_v4_pf_exit();
		}
		mutex_lock(&vdev->vdev_mutex);
	if ((((length + (skb ? skb->len : fragheaderlen)) > mtu) ||
	     (skb && skb_is_gso(skb))) &&
	cork->length += length;
	    (sk->sk_protocol == IPPROTO_UDP) &&
	    (sk->sk_type == SOCK_DGRAM) && !sk->sk_no_check_tx) {
	    (rt->dst.dev->features & NETIF_F_UFO) && !dst_xfrm(&rt->dst) &&
		err = ip_ufo_append_data(sk, queue, getfrag, from, length,
	if ((size + skb->len > mtu) &&
	    (sk->sk_protocol == IPPROTO_UDP) &&
	else if (sk->sk_no_check_tx) {   /* UDP csum disabled */
	if ((((length + (skb ? skb->len : headersize)) > mtu) ||
	     (skb && skb_is_gso(skb))) &&
	cork->length += length;
	    (sk->sk_protocol == IPPROTO_UDP) &&
	    (sk->sk_type == SOCK_DGRAM) && !udp_get_no_check6_tx(sk)) {
	    (rt->dst.dev->features & NETIF_F_UFO) && !dst_xfrm(&rt->dst) &&
		err = ip6_ufo_append_data(sk, queue, getfrag, from, length,
	struct scatterlist sg[1];
	sg_init_one(sg, buf, count);
	return __send_to_port(port, sg, 1, count, (void *)buf, false);
}
	spin_unlock_bh(&net->nsid_lock);
	key_ref_t key_ref, skey_ref;
	int rc;
	unsigned int toklen = *_toklen, n_parts, loop, tmp;
	const __be32 *xdr = *_xdr;
		if (tmp > toklen)
			return -EINVAL;
			return -EINVAL;
		tmp = (tmp + 3) & ~3;
		toklen -= tmp;
		xdr += tmp >> 2;
		princ->name_parts[loop][tmp] = 0;
	}
	if (tmp > toklen)
		return -EINVAL;
		return -EINVAL;
	tmp = (tmp + 3) & ~3;
	toklen -= tmp;
	xdr += tmp >> 2;
	princ->realm[tmp] = 0;
	unsigned int toklen = *_toklen, len;
	const __be32 *xdr = *_xdr;
		return -EINVAL;
	td->data_len = len;
		len = (len + 3) & ~3;
		toklen -= len;
		xdr += len >> 2;
			return -ENOMEM;
	}
	unsigned int toklen = *_toklen, len;
	const __be32 *xdr = *_xdr;
		return -EINVAL;
	*_tktlen = len;
		len = (len + 3) & ~3;
		toklen -= len;
		xdr += len >> 2;
			return -ENOMEM;
	}
	unsigned int len, tmp, loop, ntoken, toklen, sec_ix;
	const char *cp;
	size_t datalen = prep->datalen;
	tmp = (len + 3) & ~3;
	if (tmp > datalen)
	datalen -= 4;
		goto not_xdr;
	if (len < tmp)
		for (; loop < tmp; loop++)
			if (cp[loop])
				goto not_xdr;
			goto not_xdr;
	_debug("cellname: [%u/%u] '%*.*s'",
	       len, tmp, len, len, (const char *) xdr);
	datalen -= tmp;
	xdr += tmp >> 2;
	_debug("cellname: [%u/%u] '%*.*s'",
		if (toklen < 20 || toklen > datalen)
		_debug("token: [%x/%zx] %x", toklen, datalen, sec_ix);
			goto not_xdr;
		datalen -= (toklen + 3) & ~3;
		xdr += (toklen + 3) >> 2;
			goto not_xdr;
				if (unlikely(t == 0)) {
					while (unlikely(*ip == 0)) {
			if (unlikely(t == 2)) {
				while (unlikely(*ip == 0)) {
				NEED_IP(2);
			if (unlikely(t == 2)) {
				while (unlikely(*ip == 0)) {
				NEED_IP(2);
		return -EINVAL;
	u64 umin_val, umax_val;
		coerce_reg_to_size(dst_reg, 4);
		coerce_reg_to_size(&src_reg, 4);
	}
		if (umax_val > 63) {
			/* Shifts greater than 63 are undefined.  This includes
			 * shifts by a negative number.
	case BPF_LSH:
		if (umax_val > 63) {
			/* Shifts greater than 63 are undefined.  This includes
			 * shifts by a negative number.
	case BPF_RSH:
	__reg_deduce_bounds(dst_reg);
		/* BPF_RSH is an unsigned shift, so make the appropriate casts */
				/* Sign bit will be cleared */
		} else {
		}
		}
		if (src_known)
